{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = function () {\n  let {\n    stiffness = defaults.stiffness,\n    damping = defaults.damping,\n    mass = defaults.mass,\n    from = 0,\n    to = 1,\n    velocity = 0.0,\n    restSpeed,\n    restDistance\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  velocity = velocity ? time.s(velocity) : 0.0;\n  const state = {\n    done: false,\n    hasReachedTarget: false,\n    current: from,\n    target: to\n  };\n  const initialDelta = to - from;\n  const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n  const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n  const isGranularScale = Math.abs(initialDelta) < 5;\n  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n  restDistance || (restDistance = isGranularScale ? 0.005 : 0.5);\n  let resolveSpring;\n\n  if (dampingRatio < 1) {\n    const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio); // Underdamped spring (bouncy)\n\n    resolveSpring = t => to - Math.exp(-dampingRatio * undampedAngularFreq * t) * ((-velocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n  } else {\n    // Critically damped spring\n    resolveSpring = t => {\n      return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t);\n    };\n  }\n\n  return t => {\n    state.current = resolveSpring(t);\n    const currentVelocity = t === 0 ? velocity : calcGeneratorVelocity(resolveSpring, t, state.current);\n    const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n    const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n    state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n    state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n    return state;\n  };\n};\n\nexport { spring };","map":{"version":3,"names":["time","defaults","calcDampingRatio","hasReachedTarget","calcGeneratorVelocity","spring","stiffness","damping","mass","from","to","velocity","restSpeed","restDistance","s","state","done","current","target","initialDelta","undampedAngularFreq","Math","sqrt","dampingRatio","isGranularScale","abs","resolveSpring","angularFreq","t","exp","sin","cos","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold"],"sources":["D:/PLACE-MA-TE-RE-AL/VS CODE/Github/Fit-Fusion/node_modules/@motionone/generators/dist/spring/index.es.js"],"sourcesContent":["import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = ({ stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass, from = 0, to = 1, velocity = 0.0, restSpeed, restDistance, } = {}) => {\n    velocity = velocity ? time.s(velocity) : 0.0;\n    const state = {\n        done: false,\n        hasReachedTarget: false,\n        current: from,\n        target: to,\n    };\n    const initialDelta = to - from;\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDistance || (restDistance = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n        // Underdamped spring (bouncy)\n        resolveSpring = (t) => to -\n            Math.exp(-dampingRatio * undampedAngularFreq * t) *\n                (((-velocity + dampingRatio * undampedAngularFreq * initialDelta) /\n                    angularFreq) *\n                    Math.sin(angularFreq * t) +\n                    initialDelta * Math.cos(angularFreq * t));\n    }\n    else {\n        // Critically damped spring\n        resolveSpring = (t) => {\n            return (to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t));\n        };\n    }\n    return (t) => {\n        state.current = resolveSpring(t);\n        const currentVelocity = t === 0\n            ? velocity\n            : calcGeneratorVelocity(resolveSpring, t, state.current);\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n        state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n        return state;\n    };\n};\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}